/*
 * RecMod
 * Master build file
 * Based on TConstruct's master build file
 * Authors: Sunstrike, ProgWML6, fuj1n
 * Help from AbrarSyed
 */

buildscript {
    repositories {
        mavenCentral()
		mavenLocal()
        maven {
            name = 'ForgeFS'
            url = 'http://files.minecraftforge.net/maven'
        }
		maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }

	}
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}

repositories {
	mavenLocal()
	maven {
          name 'ForgeFS'
          url 'http://files.minecraftforge.net/maven'
     }
}


apply plugin: 'net.minecraftforge.gradle.forge'
// define the properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}
ext.artifact_version_override = 'NotUsed'
//gitignored config file -- if this has the entry for override it will override the version for local builds
//create a file called version.properties with the line artifact_version_override=NotUsed
//replace NotUsed w/ version #'s for manual local overrides
ext.configFile2 = file "version.properties"
if (configFile2.exists()){
	configFile2.withReader {
    	def prop2 = new Properties()
    	prop2.load(it)
    	ext.GIVersionFL = new ConfigSlurper().parse prop2
		if (GIVersionFL != null){
			project.artifact_version_override = GIVersionFL.artifact_version_override
		}
	}
}


// sets version to the slimeKnights default version format
task buildInfo {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    proc.waitFor()
    if (proc.exitValue() == 0) {
        ext.revision = proc.text.trim()
    } else {
        ext.revision = "GITBORK"
    }

    if (System.getenv().BUILD_NUMBER != null) {
        ext.buildNum = System.getenv().BUILD_NUMBER
    } else {
        ext.buildNum = "DEV"
    }
}
ext.artifact_version = 'NFG'
if (System.getenv().ARTIFACT_VERSION == null && artifact_version_override == 'NotUsed') {
    artifact_version = "${project.buildInfo.buildNum}.${project.buildInfo.revision}"
}
if (System.getenv().ARTIFACT_VERSION != null && artifact_version_override == 'NotUsed') {
    artifact_version = "${system.getenv().ARTIFACT_VERSION}"
}
if (artifact_version_override != 'NotUsed') {
    artifact_version = "${artifact_version_override}"
}
version = "${config.minecraft_version}-${artifact_version}"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = 'run/'
    replace '${version}', project.version
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = config.mappings_version

}


sourceSets {
	main {
		resources {
			srcDir 'resources'
		}
		java {
            srcDir 'src'
        }
	}
}
processResources
{
        // replace stuff in text files, not binary ones.
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
                // replace version and MCVersion
        expand 'version':artifact_version,'MCversion':config.minecraft_version
    }
        
        // copy everything else, thats not text
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
}

// Add Coremod Manifest
jar {
    manifest {
        attributes 'FMLAT': 'RecMod_at.cfg'
    }
}

// because the normal output has been made to be obfuscated
task deobfJar(type: Jar) {
        from sourceSets.main.output
        classifier = 'deobf'
	manifest {
        attributes 'FMLAT': 'RecMod_at.cfg'
    }
}
artifacts {
        archives deobfJar
}

